from django.shortcuts import render, redirect
from django.http.response import StreamingHttpResponse
from django.http import HttpResponse

import cv2
import numpy as np
from pygame import mixer

import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

def index(request):
    net = cv2.dnn.readNet("weights/yolov3-tiny.weights", "cfg/yolov3-tiny.cfg")
    classes = []
    with open("coco.names", "r") as f:
        classes = [line.strip() for line in f.readlines()]
    layer_names = net.getLayerNames()
    output_layers = [layer_names[i - 1] for i in net.getUnconnectedOutLayers()]
    colors = np.random.uniform(0, 255, size=(len(classes), 3))
    cap = cv2.VideoCapture('3.mp4')
    font = cv2.FONT_HERSHEY_PLAIN
    frame_id = 0
    while True:
        _, frame = cap.read()
        frame_id += 1
        height, width, channels = frame.shape
        blob = cv2.dnn.blobFromImage(frame, 0.00392, (416, 416), (0, 0, 0), True, crop=False)
        net.setInput(blob)
        outs = net.forward(output_layers)
        class_ids = []
        confidences = []
        boxes = []
        for out in outs:
            for detection in out:
                scores = detection[5:]
                class_id = np.argmax(scores)
                confidence = scores[class_id]
                if confidence > 0.2:
                    center_x = int(detection[0] * width)
                    center_y = int(detection[1] * height)
                    w = int(detection[2] * width)
                    h = int(detection[3] * height)
                    x = int(center_x - w / 2)
                    y = int(center_y - h / 2)

                    boxes.append([x, y, w, h])
                    confidences.append(float(confidence))
                    class_ids.append(class_id)
        indexes = cv2.dnn.NMSBoxes(boxes, confidences, 0.8, 0.3)
        global label
        label = ""
        if 1 in indexes:
            #print('person')
            x, y, w, h = boxes[1]
            label = 'person'
            confidence = confidences[1]
            color = colors[0]
            cv2.rectangle(frame, (x, y), (x + w, y + h), color, 2)
            cv2.putText(frame, label + " ", (x, y + 30), font, 3, color, 3)

        if label == 'person':
            mixer.init()
            mixer.music.load('alarm.mp3')
            mixer.music.set_volume(0.1)
            mixer.music.play()

            # Email notification
            sender_email = "allenp@gmail.com"  # Replace with your Gmail email address
            sender_password = "rpdv diqz aptw nyyf"  # Replace with your app password

            receiver_email = "allenp@gmail.com"  # Replace with the recipient's email address

            subject = "Theft Detected!"
            body = "A theft has been detected. Please check the security camera."

            message = MIMEMultipart()
            message['From'] = sender_email
            message['To'] = receiver_email
            message['Subject'] = subject
            message.attach(MIMEText(body, 'plain'))

            with smtplib.SMTP('smtp.gmail.com', 587) as server:
                server.starttls()
                server.login(sender_email, sender_password)
                text = message.as_string()
                server.sendmail(sender_email, receiver_email, text)

            cap.release()
            cv2.destroyAllWindows()
            break
        else:
            frame = cv2.resize(frame, (800, 600))
            cv2.imshow("Image", frame)

        # cv2.imshow("Image", frame)
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

    cv2.destroyAllWindows()
    cap.release()
    return render(request, "index.html")